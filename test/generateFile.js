const fs = require("fs");
const path = require("path");

// 假设这是您的Markdown文件内容，实际上应从文件读取
const markdownContent = `
## module-1
- 01.欢迎加入课程
- 02.什么是Nodejs
- 03.Nodejs的安装与使用
- 04.理解Nodejs的角色与使用
- 05.课程知识体系
- 06.Nodejs代码运行方式

## module-2
- 01.模块介绍
- 02.Javascript简要介绍
- 03.变量、函数、作用域
- 04.let与const
- 05.箭头函数
- 06.属性方法和事件
- 07.数组及数组方法
- 08.基本类型与引用类型
- 09.展开操作运算和剩余操作运算
- 10.解构赋值
- 11.async异步与promise承诺
- 12.总结

## module-3
- 01.简介
- 02.网站工作原理
- 03.创建服务
- 04.NodeJs程序运行过程原理
- 05.理解请求对象
- 06.发送响应信息
- 07.单线程概念的进一步理解
- 08.事件轮询机制进一步理解
- 09.路由请求
- 10.get请求数据的获取
- 11.post请求数据的获取
- 12.重定向
- 13.理解事件驱动代码执行方式
- 14.阻塞与非阻塞的理解
- 15.模块迁移与模块操作
- 16.总结

## module-4
- 01.介绍
- 02.什么是NPM
- 03.第三方模块
- 04.利用nodemon进行项目的自动启动
- 05.错误的类型
- 06.语法错误
- 07.运行错误
- 08.逻辑错误
- 09.步调功能
- 10.调试工具的自动重启功能
- 11.调试工具设值操作
- 12.总结

## module-5
- 01.简介
- 02.什么是express
- 03.安装express
- 04.添加中间件
- 05.中间件的运行
- 06.express背后的运行机制
- 07.路由的概念
- 08.添加其它路由
- 09.获取请求的参数
- 10.限制中间件为post请求
- 11.express路由的使用
- 12.添加404错误页面
- 13.过滤路径
- 14.创建HTML页面
- 15.服务器中处理HTML页面
- 16.渲染404错误页
- 17.通过辅助函数封装导航
- 18.界面美化
- 19.静态资源目录的设置与应用
- 20.利用Bootstrap进行项目界面改造
- 21.总结

## module-6
- 01.介绍
- 02.数据的传递操作
- 03.模板引擎
- 04.模板引擎的安装与pug引擎的应用
- 05.动态内容的输出
- 06.转换404页面到pug
- 07.用include的方式进行代码封装
- 08.用extends及block进行模板集成
- 09.菜单的高亮显示
- 10.pug与html格式之间的互换
- 11.handlebars模板引擎的应用
- 12.产品列表及添加产品页的hbs转化
- 13.修复标题与菜单导航的高亮
- 14.partials片段代码的应用
- 15.EJS模板引擎的应用
- 16.ejs中使用partials
- 17.express-generator项目的搭建
- 18.分析express-generator项目
- 19.总结

## module-7
- 01.简介
- 02.拆分controller控制层
- 03.出错控制的管理
- 04.添加模型
- 05.文件式数据获取操作
- 06.文件式数据存储操作
- 07.检测与获取产品功能的抽离
- 08.总结

## module-8
- 01.简介
- 02.按商城项目对当前项目进行结构调整
- 03.商城导航的改造
- 04.注册新的路由模块
- 05.完善产品信息
- 06.显示新增产品属性内容
- 07.修改、删除产品页的完善

## module-9
- 01.简介
- 02.给产品列表添加详情链接
- 03.产品详情的设参、传参与接参
- 04.获取产品详情数据
- 05.产品详情页的渲染
- 06.实现添加购物车表单数据的提交操作
- 07.购物车操作流程
- 08.添加购物车数据模型
- 09.产品编辑功能模块的处理以及查询参数
- 10.产品编辑的准备工作
- 11.修改产品数据
- 12.删除产品的操作
- 13.显示购物车清单
- 14.删除购物车产品
- 15.总结

## module-10
- 01.介绍
- 02.数据的选择及二维关系型数据库
- 03.非关系型数据库
- 04.关系型数据库与非关系型数据的对比
- 05.mysql的安装
- 06.利用workbench进行数据表的创建
- 07.利用workbench熟悉标准SQL查询语句
- 08.连接mysql
- 09.替换产品文件操作方式，修改为数据库模式
- 10.产品列表的功能处理
- 11.添加产品数据
- 12.获取单个产品以及删除产品
- 13.总结

## module-11
- 01.介绍
- 02.什么是sequelize
- 03.sequelize连接至数据库
- 04.定义数据模型
- 05.同步数据模型至数据库
- 06.添加数据创建产品
- 07.获取产品列表
- 08.获取产品详情
- 09.修改管理
- 10.删除产品数据
- 11.添加用户数据模型
- 12.添加一对多的关系
- 13.新建默认用户
- 14.产品与用户进行关联关系
- 15.获取关联产品数据
- 16.一对多以及多对多关系的建立
- 17.添加产品到购物车
- 18.获取购物车清单列表
- 19.删除购物车清单产品项
- 20.添加订单的数据模型
- 21.将购物车产品添加成订单产品项
- 22.订单列表的输出显示
- 23.总结

## module-12
- 01.介绍
- 02.什么是mongodb
- 03.非关系型数据库中的关联
- 04.mongodb安装与使用
- 05.mongodb的启动
- 06.常用的mongodb查询命令
- 07.连接mongodb数据库
- 08.获取mongodb连接的数据库对象
- 09.产品数据模型的改造
- 10.获取产品列表数据
- 11.获取单个产品信息
- 12.修改及删除产品数据
- 13.显示商城的产品列表及产品详情内容
- 14.用户数据模型的构建

## module-13
- 01.介绍
- 02.什么是mongoose
- 03.安装使用并实现mongodb数据库连接
- 04.产品数据模型的定义
- 05.添加产品信息
- 06.获取所有产品列表
- 07.修改产品操作
- 08.删除产品操作
- 09.显示商城的产品列表及产品详情内容
- 10.用户数据模型的构建
- 11.改造产品数据模型，存储用户信息
- 12.联表数据的获取
- 13.商品购物车操作
- 14.显示购物车清单
- 15.删除购物车产品项
- 16.生成订单
- 17.获取产品所有字段信息内容
- 18.获取订单列表
- 19.总结

## module-14
- 01.介绍
- 02.什么是cookie
- 03.添加登录功能
- 04.设置登录请求
- 05.设置Cookie
- 06.修改操纵Cookie
- 07.Cookie的属性设置操作
- 08.什么是session
- 09.express中session的使用
- 10.利用mongodb存储session数据
- 11.cookie的删除
- 12.利用session对项目进行改造
- 13.总结

## module-15
- 01.介绍
- 02.授权认证的操作流程
- 03.添加注册版块
- 04.实现用户注册流程
- 05.加密password密码内容
- 06.用户登录
- 07.路由保护
- 08.利用中间件实现路由保护
- 09.CSRF攻击
- 10.csrf令牌
- 11.CSRF保护
- 12.修复订单生成的错误内容
- 13.给注册登录添加简单的表单验证提示
- 14.总结

## module-16
- 01.介绍
- 02.163邮件的服务开启
- 03.qq邮件的服务开启
- 04.nodemailer的安装与使用

## module-17
- 01.介绍
- 02.重置密码的流程
- 03.重置密码
- 04.实现重置密码的Token生成
- 05.重置密码表单
- 06.重置密码操作
- 07.为什么需要权限验证
- 08.产品管理的权限添加
- 09.总结

## module-18
- 01.介绍
- 02.为什么需要用户验证
- 03.如何实现验证
- 04.验证的安装配置与基础验证的实现
- 05.改进错误的信息提示
- 06.更多内置验证规则以及自定义验证操作
- 07.更多的验证规则
- 08.重复密码的验证处理
- 09.异步验证
- 10.保留用户输入的数据信息
- 11.改善出错提示的输入框显示样式
- 12.登录表单验证的实现
- 13.sanitizers验证中的数据清理
- 14.添加产品验证
- 15.修改产品表单验证
- 16.总结

## module-19
- 01.介绍
- 02.当前项目的错误处理解析
- 03.错误处理理论示例
- 04.当前项目中进行错误捕获
- 05.返回错误页面
- 06.利用express中间件进行错误页面显示
- 07.更新项目报错处理代码
- 08.正确理解与应用express中间件进行错误处理
- 09.http状态码
- 10.总结

## module-20
- 01.介绍
- 02.给项目添加文件选择功能
- 03.multipart表单数据形式
- 04.multipart表单数据
- 05.自定义文件名的设置
- 06.对于文件格式的过滤操作
- 07.存储文件信息至数据库
- 08.静态资源目录的设置
- 09.授权模式下的文件下载
- 10.设置文件头信息
- 11.文件限制访问
- 12.预加载数据与流数据
- 13.pdf的生成
- 14.给pdf添加订单信息
- 15.文件删除操作
- 16.总结

## module-21
- 01.介绍
- 02.给产品列表添加分页码
- 03.限制每页显示的产品数量
- 04.分页码的计算
- 05.显示分页码
- 06.mongoose-paginate实现分页

## module-22
- 01.介绍
- 02.添加客户端javascript脚本
- 03.向服务器端发送数据
- 04.客户端删除产品处理

## module-23
- 01.介绍
- 02.确认支付订单的显示
- 03.支付宝帐号的设置
- 04.利用alipay-sdk进行支付流程操作
- 05.订单支付操作

## module-24
- 01.介绍
- 02.rest api操作方式
- 03.路由及请求方式
- 04.rest核心原则
- 05.快速创建rest api接口项目
- 06.利用前端接口调试工具postman进行接口测试
- 07.项目开发调用接口应用
- 08.总结

## module-25
- 01.介绍
- 02.改写成async、await的代码模式
- 03.循环时async、await的使用

## module-26
- 01.介绍
- 02.socket.io安装以及服务的配置
- 03.客户端的连接
-

04.客户端发送消息给其它客户端
- 05.添加产品成功以后通知每个用户
- 06.总结

## module-27
- 01.介绍
- 02.项目环境的安装
- 03.schema的创建以及查询的处理
- 04.扩展操作类型
- 05.参数的传递以及查询的获取
- 06.客户端进行graphql请求处理
- 07.新增数据操作
- 08.修改数据操作
- 09.新增修改客户端的请求处理
- 10.与数据库的衔接
- 11.总结

## module-28
- 01.介绍
- 02.环境变量
- 03.安全头信息的设置
- 04.输出内容的压缩
- 05.日志记录操作
- 06.ssl服务器

## module-29
- 01.介绍
- 02.安装使用mocha
- 03.spy监控
- 04.mock调用
- 05.stub的使用
- 06.promise的测试
- 07.xhr请求测试
- 08.钩子函数
- 09.测试报告的输出
- 10.其它

## module-30
- 01.npm的理解
`;

// 解析Markdown内容
const lines = markdownContent.split("\n");
let currentModule = null;

lines.forEach((line) => {
  line = line.trim();

  if (line.startsWith("##")) {
    // 新模块开始
    currentModule = line.replace(/^##\s*/, "").trim();
    fs.mkdirSync(path.join(__dirname, currentModule), { recursive: true });
  } else if (line.startsWith("- ")) {
    // 课程条目
    // 直接提取编号和标题，去除列表标记和前导空格，然后添加.md扩展名
    const fullTitleWithNumber = line.replace(/^\s*-\s*/, "").trim();
    const fileName = `${fullTitleWithNumber}.md`;
    const filePath = path.join(__dirname, currentModule, fileName);

    // 写入Markdown文件内容
    const [number, title] = fullTitleWithNumber.split(".");
    const content = `---
title: ${title.trim()}
aside: false
---

# ${fullTitleWithNumber.trim()}

<video autoplay src="http://qn.chinavanes.com/nodejs/${currentModule}/${fullTitleWithNumber}.mp4" controls controlsList="nodownload" width="100%" height="680"/>

`;
    fs.writeFileSync(filePath, content, "utf8");
  }
});

console.log("所有文件和目录已成功创建！");
